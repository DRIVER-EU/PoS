<?php
 /* composer require "drupal/ultimate_cron:^2.0" */
 /**
 * pos_group_notifications module
 *
 */
 
use \Drupal\user\Entity\User;
use \Drupal\views\Views;
use Drupal\node\Entity\Node;
use Drupal\Component\Render\PlainTextOutput;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Form\FormStateInterface;

define('POS_HISTORY_READ_LIMIT', REQUEST_TIME - 30 * 24 * 60 * 60);

use Drupal\Core\Routing\RouteMatchInterface;

function pos_group_notifications_update_projects_alter(&$projects) {
  // Hide a site-specific module from the list.
  unset($projects['pos_group_notifications']);
}

function pos_group_notifications_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.pos_group_notifications':
      return t("
        <h2>E-mail notification to the group members.</h2>
        <h3>Help</h3>
        <p>Copy this module in the custom *modules* folder of your site and enable it in '/admin/modules'.</p>

        <p>After enable this module you can acces to the main configuration in admin/config/pos_group_notifications.</p>
    ");
    break;
  }
}

function pos_group_notifications_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	

	//drupal_set_message("form_id =".$form_id."<----", 'error');
	
	if (('group_content_group_content_type_94199226bd05c_edit_form' == $form_id)) {
				
			$entity = $form_state->getFormObject()->getEntity();

			$pos_field_approve_feedback_previous_status = $entity->field_approve_feedback[0]->value;
			
			//field used to know if the field field_qa_approved change from 0 to 1
	 		$form['pos_field_approve_feedback_previous_status'] = [
				'#type'          => 'hidden',
				//'#type'          => 'textfield',
				'#title'         => 'pos_field_approve_feedback_previous_status',
				'#default_value' =>  $pos_field_approve_feedback_previous_status,
			];

			$pos_field_reply_previous_status = $entity->field_reply[0]->value;
			
			//field used to know if the field field_qa_approved change from 0 to 1
	 		$form['pos_field_reply_previous_status'] = [
				'#type'          => 'hidden',
				//'#type'          => 'textfield',
				'#title'         => 'pos_field_reply_previous_status',
				'#default_value' =>  $pos_field_reply_previous_status,
			];
									
			//field_reply
			
			$form['actions']['submit']['#submit'][] = 'pos_group_notifications_submit_feedback_group_form';
	}
	
	else if (('group_solution_edit_form' == $form_id) || ('group_solution_add_form' == $form_id) 
	||
	('group_trial_edit_form' == $form_id) || ('group_trial_add_form' == $form_id)) {

		//we check if the form has the field field_publish
		if (array_key_exists('field_publish', $form)) {
			//drupal_set_message("field_publish exists in the form", 'error');
			
			$field_publish_previous_value = $form_state->getValue('field_publish');
			$entity = $form_state->getFormObject()->getEntity();			
			$field_publish_previous_value = 0;
			$field_publish_previous_value = $entity->field_publish[0]->value;
			
			//drupal_set_message("field_publish_previous_value=".$field_publish_previous_value, 'error');
			
			//field used to know if the field field_publish change from 0 to 1
	 		$form['pos_field_publish_previous_status'] = [
				'#type'          => 'hidden',
				//'#type'          => 'textfield',
				'#title'         => 'pos_field_publish_previous_status',
				'#default_value' =>  $field_publish_previous_value,
			];
			
			
			
			$field_qa_approved_previous_value = $form_state->getValue('field_qa_approved');
			$entity = $form_state->getFormObject()->getEntity();			
			$field_qa_approved_previous_value = 0;
			$field_qa_approved_previous_value = $entity->field_qa_approved[0]->value;
			
			//field used to know if the field field_qa_approved change from 0 to 1
	 		$form['pos_field_QA_approved_previous_status'] = [
				'#type'          => 'hidden',
				//'#type'          => 'textfield',
				'#title'         => 'pos_field_qa_approved_previous_status',
				'#default_value' =>  $field_qa_approved_previous_value,
			];
			
			$field_qa_comments_previous_status = "";
			$field_qa_comments_previous_status = $entity->field_qa_comments[0]->value;
	 		$form['pos_field_qa_comments_previous_status'] = [
				'#type'          => 'hidden',
				//'#type'          => 'textfield',
				'#title'         => 'pos_field_qa_comments_previous_status',
				'#default_value' =>  $field_qa_comments_previous_status,
			];
								
			// Add a custom submit handler to send email when Request publication (field field_publish) is checked to true.
			$form['actions']['submit']['#submit'][] = 'pos_group_notifications_submit_group_form';
			
		}
	}
}

/**
* Implements hook_mail().
*/

use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;


/**
 * Implements hook_mail_alter().
 */
 /*
function pos_group_notifications_mail_alter(&$message) {
	//drupal_set_message('pos_group_notifications_mail_alter. message["id"]='.$message['id'].'----', 'error');
	// only alter pos_group_notifications_pos_group_notifications_mailing_list forms
	if (!empty($message['id']) && $message['id'] == 'pos_group_notifications_pos_group_notifications_mailing_list') {
		// make it a bit neater to access fields
	
		
		//sending html formatted email
		$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
		
		
    }
  
}
*/

function pos_group_notifications_mail($key, &$message, $params) {
		
	//drupal_set_message("---pos_group_notifications_mail---", 'error');
	
	$options = array(
		'langcode' => $message['langcode'],
	);

	//drupal_set_message("---key---".$key, 'error');
	switch ($key) {
		case 'pos_group_notifications_mailing_list':
			//drupal_set_message("---pos_group_notifications_mail 1---".$params['context']['message'], 'error');
			$message['from'] = \Drupal::config('system.site')->get('mail');
			$message['reply-to'] = \Drupal::config('system.site')->get('mail');
	 		$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';	 
			$message['headers']['MIME-Version'] = '1.0';
     		$message['subject'] = $params['context']['subject'];
     		//$message['body'][] = '<html><body>'.$params['context']['message'].'</body></html>';
			
			/*=========store template in variable============*/
			$site_name = \Drupal::config('system.site')->get('name');
			global $base_url;
			$host = $base_url;

			//drupal_set_message("---host---".$host, 'error');

			$replacedText = str_replace('src="/sites/default/', 'src="'.$host.'/sites/default/', $params['context']['message']);
			//drupal_set_message("---pos_group_notifications_mail 2---".$replacedText, 'error');

			$msg = '
			<!doctype html><html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" dir="ltr"><head><!--[if gte mso 15]>
			        <xml>
			            <o:OfficeDocumentSettings>
			                <o:AllowPNG/>
			                <o:PixelsPerInch>96</o:PixelsPerInch>
			            </o:OfficeDocumentSettings>
			        </xml>
			        <![endif]-->
					<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
					<title>PoS notification</title>       
			        <meta http-equiv="x-ua-compatible" content="IE=edge">
			        <meta name="viewport" content="width=device-width, initial-scale=1">
			        <meta name="description" content="PoS Notification">
			        <meta name="keywords" content="PoS Notification">        
			    	<style type="text/css">
					body{
						font:14px/20px Helvetica, Arial, sans-serif;
						margin:0;
						padding:75px 0 0 0;
						text-align:center;
						-webkit-text-size-adjust:none;
					}
					p{
						padding:0 0 10px 0;
					}
					h1 img{
						max-width:100%;
						height:auto !important;
						vertical-align:bottom;
					}
					h2{
						font-size:22px;
						line-height:28px;
						margin:0 0 12px 0;
					}
					h3{
						margin:0 0 12px 0;
					}
					.headerBar{
						background:none;
						padding:0;
						border:none;
					}
					.wrapper{
						width:600px;
						margin:0 auto 10px auto;
						text-align:left;
					}
					input.formEmailButton{
						border:none !important;
					}
					.formEmailButton{
						display:inline-block;
						font-weight:500;
						font-size:16px;
						line-height:42px;
						font-family:Helvetica, Arial, sans-serif;
						width:auto;
						white-space:nowrap;
						height:42px;
						margin:12px 5px 12px 0;
						padding:0 22px;
						text-decoration:none;
						text-align:center;
						cursor:pointer;
						border:0;
						border-radius:3px;
						vertical-align:top;
					}
					.formEmailButton span{
						display:inline;
						font-family:Helvetica, Arial, sans-serif;
						text-decoration:none;
						font-weight:500;
						font-style:normal;
						font-size:16px;
						line-height:42px;
						cursor:pointer;
						border:none;
					}
					.rounded6{
						border-radius:6px;
					}
					.poweredWrapper{
						padding:20px 0;
						width:560px;
						margin:0 auto;
					}
					.poweredBy{
						display:block;
					}
					span.or{
						display:inline-block;
						height:32px;
						line-height:32px;
						padding:0 5px;
						margin:5px 5px 0 0;
					}
					.clear{
						clear:both;
					}
					.profile-list{
						display:block;
						margin:15px 20px;
						padding:0;
						list-style:none;
						border-top:1px solid #eee;
					}
					.profile-list li{
						display:block;
						margin:0;
						padding:5px 0;
						border-bottom:1px solid #eee;
					}
					html[dir=rtl] .wrapper,html[dir=rtl] .container,html[dir=rtl] label{
						text-align:right !important;
					}
					html[dir=rtl] ul.interestgroup_field label{
						padding:0;
					}
					html[dir=rtl] ul.interestgroup_field input{
						margin-left:5px;
					}
					html[dir=rtl] .hidden-from-view{
						right:-5000px;
						left:auto;
					}
					body,#bodyTable{
						background-color:#00497E;
					}
					h1{
						font-size:28px;
						line-height:110%;
						margin-bottom:30px;
						margin-top:0;
						padding:0;
					}
					#templateContainer{
						background-color:none;
					}
					#templateBody{
						background-color:#ffffff;
					}
					.bodyContent{
						line-height:150%;
						font-family:Helvetica;
						font-size:14px;
						color:#333333;
						padding:20px;
					}
					a:link,a:active,a:visited,a{
						color:#336699;
					}
					.formEmailButton:link,.formEmailButton:active,.formEmailButton:visited,.formEmailButton,.formEmailButton span{
						background-color:#5d5d5d !important;
						color:#ffffff !important;
					}
					.formEmailButton:hover{
						background-color:#444444 !important;
						color:#ffffff !important;
					}
					label{
						line-height:150%;
						font-family:Helvetica;
						font-size:16px;
						color:#5d5d5d;
					}
					.field-group input,select,textarea,.dijitInputField{
						font-family:Helvetica;
						color:#5d5d5d !important;
					}
					.asterisk{
						color:#cc6600;
						font-size:20px;
					}
					label .asterisk{
						visibility:hidden;
					}
					.indicates-required{
						display:none;
					}
					.field-help{
						color:#777;
					}
					.error,.errorText{
						color:#e85c41;
						font-weight:bold;
					}
				@media (max-width: 620px){
					body{
						width:100%;
						-webkit-font-smoothing:antialiased;
						padding:10px 0 0 0 !important;
						min-width:300px !important;
					}
			
			}	@media (max-width: 620px){
					.wrapper,.poweredWrapper{
						width:auto !important;
						max-width:600px !important;
						padding:0 10px;
					}
			
			}	@media (max-width: 620px){
					#templateContainer,#templateBody,#templateContainer table{
						width:100% !important;
						-moz-box-sizing:border-box;
						-webkit-box-sizing:border-box;
						box-sizing:border-box;
					}
			
			}	@media (max-width: 620px){
					.addressfield span{
						width:auto;
						float:none;
						padding-right:0;
					}
			
			}	@media (max-width: 620px){
					.captcha{
						width:auto;
						float:none;
					}
			
			}		.gdpr-mergeRow{
						margin:10px 0;
						color:#4a4a4a;
						font-family:Helvetica;
					}
					.gdpr-content{
						margin:0 -20px 0 -20px;
						padding:20px;
						background:rgba(255, 255, 255, 0.8);
					}
					#gdpr-label{
						margin-top:0;
					}
					#gdpr-description{
						margin-top:6px;
						margin-bottom:0;
						padding-bottom:11px;
					}
					.gdpr-content p{
						color:#4a4a4a;
						font-size:13px;
						line-height:1.5;
					}
					.gdpr-content .checkbox-group label{
						font-weight:normal;
						font-size:13px;
					}
					#gdpr-legal{
						padding-top:20px;
						margin:0;
					}
					.gdpr-footer{
						margin:0 -20px 0 -20px;
						padding:20px;
						background:rgba(255, 255, 255, 0.9);
						overflow:auto;
						color:#6d6d6d;
					}
					.gdpr-footer p{
						font-size:10px;
						line-height:1.5;
						margin-bottom:0;
					}
					.gdpr-footer a{
						color:#206578;
					}
					.gdpr-footer img{
						width:65px;
						float:left;
						margin-right:15px;
					}
			</style></head>
			    <body leftmargin="0" marginwidth="0" topmargin="0" marginheight="0" offset="0" style="font: 14px/20px Helvetica, Arial, sans-serif;margin: 0;padding: 75px 0 0 0;text-align: center;-webkit-text-size-adjust: none;background-color: #00497E;">
			    	<center>
			        	<table border="0" cellpadding="20" cellspacing="0" height="100%" width="100%" id="bodyTable" style="background-color: #00497E;">
			            	<tr>
			                	<td align="center" valign="top">
			                    	<!-- // BEGIN CONTAINER -->
			                        <!--[if gte mso 9]>
			                        <table align="center" border="0" cellspacing="0" cellpadding="0" width="600" style="width:600px;">
			                        <tr>
			                        <td align="center" valign="top" width="600" style="width:600px;">
			                        <![endif]-->
			                        <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px;border-radius: 6px;background-color: none;" id="templateContainer" class="rounded6">
			                        	<tr>
			                            	<td align="center" valign="top">
			                                	<!-- // BEGIN HEADER -->
			                                    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:600px">
			                                    	<tr>
			                                        	<td>
			                                            	<h1 style="font-size: 28px;line-height: 110%;margin-bottom: 30px;margin-top: 0;padding: 0;">
			                                            	<span style="color:#FDB913">
			                                            	'.$site_name.'
			                                            	</span>
			                                            	</h1>
			                                            </td>
			                                        </tr>
			                                    </table>
			                                	<!-- END HEADER \\ -->
			                                </td>
			                            </tr>
			                        	<tr>
			                            	<td align="center" valign="top">
			                                	<!-- // BEGIN BODY -->
			                                	<table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px;border-radius: 6px;background-color: #ffffff;" id="templateBody" class="rounded6">
			                                    	<tr>                                            
			                                            <td align="left" valign="top" class="bodyContent" style="line-height: 150%;font-family: Helvetica;font-size: 14px;color: #333333;padding: 20px;">
			                                                
			                                                <div id="contentEmail" class="contentBox">
																<p style="padding: 0 0 10px 0;">
																	'.$replacedText.'
																</p>
															</div>
			                                            </td>                                            
			                                        </tr>
			                                    </table>
			                                    <!-- END BODY \\ -->
			                                </td>
			                            </tr>
			                        	<tr>
			                            	<td align="center" valign="top">
			                                	<!-- // BEGIN FOOTER -->
			                                	<table border="0" cellpadding="20" cellspacing="0" width="100%" style="max-width:600px">
			                                    	<tr>
			                                        	<td align="center" valign="top">                                                
			                                                <div>
			                                                    <span class="poweredBy" style="display: block;">
			                                                    	<a href="'.$host.'" style="color: #336699;">
			                                                    		<img src="'.$host.'/themes/reboot/driver-logo.png" width="139" height="54">
			                                                    	</a>
			                                                    </span>
			                                                </div>                                                
			                                            </td>
			                                        </tr>
			                                    </table>
			                                    <!-- END FOOTER \\ -->
			                                </td>
			                            </tr>
			                        </table>
			                        <!--[if gte mso 9]>
			                        </td>
			                        </tr>
			                        </table>
			                        <![endif]-->
			                        <!-- END CONTAINER \\ -->
			                    </td>
			                </tr>
			            </table>
			        </center>
			   </body>
			</html>
			';
			
			$message['body'][] = $msg;
			
			//$message['body'][] = \Drupal::service('renderer')->render($params['context']['message']);
			//$message['body'][] = render($params['context']['message']);
			
			//$message['message'][] = $params['context']['message'];
						
      		break;
		default:
			//drupal_set_message("---pos_group_notifications_mail 1---".$params['context']['message'], 'error');
			$message['from'] = \Drupal::config('system.site')->get('mail');
	 		$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';	 
			$message['headers']['MIME-Version'] = '1.0';
     		$message['subject'] = $params['context']['subject'];
			$message['body'][] = '<html><body>'.$params['context']['message'].'</body></html>';
			
			break;
  		}
	
}


function pos_send_custom_email($to, $subject_email, $body_email, $key) {
	
	if ($to) {
		//checking if the user has enabled the checkbox to receive emails notifications,  we recover user data by user email
		$userByEmailData = user_load_by_mail($to);
		
		//we must check the current status of the user. BLocked user don't receive emails
		
		$isUserActive = $userByEmailData->isActive();
		//drupal_set_message("to:".$to."--isUserActive:".(string) $isUserActive);
		
		$name= $userByEmailData->getUsername();
		$checkboxAcceptNotifications = 0;
		//$checkboxAcceptNotifications = $userByEmailData->get('field_accept_group_noti_by_email')->value;	
		$checkboxAcceptNotifications = $userByEmailData->get('field_accept_email_notifications')->value;
		
		$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings
		$pos_group_notifications_testing_mode = $config->get('pos_group_notifications_testing_mode'); 
		$pos_group_notifications_primary_email = $config->get('pos_group_notifications_primary_email');

		if ($pos_group_notifications_testing_mode==True) {
			$to_email = $pos_group_notifications_primary_email;
		}
		else {
			$to_email = $to;
		}
				
		if ($isUserActive) {
			if ($checkboxAcceptNotifications==1) {		
						
			
				$mailManager = \Drupal::service('plugin.manager.mail');
				$module = 'pos_group_notifications';
				//$key = 'pos_group_notifications_request_publication'; // Replace with Your key
			
				//$langcode = \Drupal::currentUser()->getPreferredLangcode();
				$langcode = 'en';
			  	$send = true;
			
				$params['context']['message'] = $body_email;
				$params['context']['subject'] = $subject_email;	
			
				//$params['options']['username'] = 'mimimi';
				//$params['options']['title'] = t('Your wonderful title');
				//$params['options']['footer'] = t('Your wonderful footer');
									
				//$result = $mailManager->mail($module, $key, $to_email, $langcode, $params, NULL, $send);
				
				//drupal_set_message("to:".$to_email, 'error');
				//drupal_set_message("langcode:".$langcode, 'error');
				//drupal_set_message("subject:".$subject_email, 'error');
				//drupal_set_message("body:".$body_email, 'error');
				
				$errorREcoverInCath = "";
				try {
					/*
					if ($key=='pos_group_notifications_mailing_list') {
						$result = $mailManager->mail($module, $key, $to_email, $langcode, $params, NULL, $send);	
					}
					else {
						$result = $mailManager->mail('system', 'mail', $to_email, $langcode, $params, NULL, $send);
					}
					*/
					
					if ($key=='pos_group_notifications_mailing_list') {
						//send emails in HTML format
						$result = $mailManager->mail('pos_group_notifications', $key, $to_email, $langcode, $params, NULL, $send);	
					}
					else {
						$result = $mailManager->mail('system', 'mail', $to_email, $langcode, $params, NULL, $send);
					}
					
					
					
					
					//
					//$result = $mailManager->mail($module, 'pos_group_notifications_mailing_list', $to_email, $langcode, $params, NULL, $send);
					
				
					//drupal_set_message("after send email", 'error');
				} catch (Exception $e) {
			    	//echo 'Caught exception: ',  $e->getMessage(), "\n";
					//drupal_set_message("after send email cath: ".$e->getMessage(), 'error');
					$errorREcoverInCath = $e->getMessage();
					$result['result'] = false;
				}
				//$mailManager->mail($module, $key, $to_email, 'en', $params, $reply = NULL, $send = TRUE);
				
				
				if ($result['result'] != true) {
											
					$extra_text = '-key='.$key.'-</br>-Executed in testing mode:';
					if ($pos_group_notifications_testing_mode==1) {
						$extra_text .= " ON";
					}
					else {
						$extra_text .= " OFF";
					}
					$extra_text .= "</br>";
					$extra_text .= '</br>-To:'.$to_email." </br>-Subject:".$subject_email."</br>-Body:</br>".$body_email;
										
					$message = t('There was a problem sending the email notification to @email.', array('@email' => $to_email));
					
					if ($errorREcoverInCath!="") {
						$message .= "</br>".$errorREcoverInCath;
					}
								
					$message .= "</br>".$extra_text;
					
					$message = str_replace("\n", "</br>", $message);
					
					\Drupal::logger('pos_group_notifications')->error($message);
			
				}
			
			}
		}
		else {
			$message = "The user with email ".$to." (".$name.") is bloked. We cannot send any email";
			
			if ($pos_group_notifications_testing_mode==1) {
				$message .= "</br>";
				$message .= '-key='.$key.'-</br>-Executed in testing mode:';
			}

			$message .= "</br>";
			$message .= '</br>-To:'.$to_email." </br>-Subject:".$subject_email."</br>-Body:</br>".$body_email;
			
			//uncomment next line if you wish to add a log
			//\Drupal::logger('pos_group_notifications')->error($message);
		}
	}
}


//function that checks if the request_publication email need to be sended, and send it
function pos_group_notification_request_publication(array $form, FormStateInterface $form_state) {
	//drupal_set_message("IN pos_group_notification_request_publication!!!", 'error');
	
    $pos_field_publish_previous_status = $form_state->getValue('pos_field_publish_previous_status');

	if (array_key_exists('field_publish', $form)) {
		$new_field_publish_value = $form_state->getValue('field_publish');		
		$new_field_publish_value = $new_field_publish_value['value'];
	}

	if (array_key_exists('pos_field_publish_previous_status', $form)) {
		$previous_field_publish_value = $form_state->getValue('pos_field_publish_previous_status');
		//drupal_set_message("IN --previous_field_publish_value:".$previous_field_publish_value."<---", 'error');
		//$previous_field_publish_value = $previous_field_publish_value['value'];		
	}
	else {
		$previous_field_publish_value = $new_field_publish_value;
	}

	$field_qa_approved = 0;		
	if (array_key_exists('field_qa_approved', $form)) {
		$field_qa_approved = $form_state->getValue('field_qa_approved');		
		$field_qa_approved = $field_qa_approved['value'];
	}
	//if $field_qa_approved == 0 -> reject
	//if $field_qa_approved == 1 -> accept
		
    //drupal_set_message("-previous_field_publish_value value ->".$previous_field_publish_value."<---", 'error');
	//drupal_set_message("-new_field_publish_value value ->".$new_field_publish_value."<---", 'error');

	//send an email if:
	// * after update a group and field_publish change from 0 to 1
	
	$entity = $form_state->getFormObject()->getEntity();
	
	$sendEmail = False;
	//Used when user changes the “approval requested” to true and qa approved is false.
	if ($field_qa_approved == 0) {
		if (($previous_field_publish_value==0) && ($new_field_publish_value==1)) {
			$sendEmail = True;
		}
	}
	
	//$sendEmail = True;
	
	//drupal_set_message("-change condition to send email<---", 'error');
	if ($sendEmail==True) {
		//drupal_set_message("-sending email true<---", 'error');
		
		$config =  \Drupal::config('pos_group_notifications.settings');
		$pos_group_notifications_request_publication_subject = $config->get('pos_group_notifications_request_publication_subject');
		$pos_group_notifications_request_publication_body = $config->get('pos_group_notifications_request_publication_body');

		global $base_url;
		$host = $base_url;

		// access to the main site data
		$system_site_config = \Drupal::config('system.site');
 		$site_email = $system_site_config->get('mail');
		$site_name = $system_site_config->get('name');
		
		$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_request_publication_subject);

		$current_uid = \Drupal::currentUser()->id();
		 		
		$current_user = User::load($current_uid);
		
		$current_user_name = $current_user->get('field_real_name')->value;
				
		$gid = $entity->id[0]->value;
		$group = Drupal\group\Entity\Group::load($gid);	
				
		$group_name = $form_state->getValue('label');
		$group_name = $group_name[0]['value'];
		
		$group_name ="<a href='".$host."/group/".$gid."'>".$group_name."</a>";
		
		//The list of members to notify are the ones that belong to the uid configured in pos_group_notifications_request_publication_role_to_notify
		//$group_members = $group->getMembers();
		//
		$pos_group_notifications_request_publication_role_to_notify = $config->get('pos_group_notifications_request_publication_role_to_notify');
		//drupal_set_message("-gid-->".$pos_group_notifications_request_publication_role_to_notify."<---", 'error');
		$group_members = pos_group_notifications_get_list_of_members_by_role_name($pos_group_notifications_request_publication_role_to_notify);

		$key = 'pos_group_notifications_request_publication';

		foreach ($group_members as $user) {
    		//$user = $member->getUser();
			
			$uid = $user->get('uid')->value;
    		$realname = $user->get('field_real_name')->value;
			$mail = $user->get('mail')->value;
			
			//drupal_set_message("--uid-->".$uid."<---realname-->".$realname."<---", 'error');
    				
			//$usersToSenNotification[] = array("uid"=>$uid, "mail"=> $mail, "realname" => $realname );
			
			//$body_email = "send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---";
			$body_email = $pos_group_notifications_request_publication_body;
			
			$body_email = str_replace("[user:display-name]", $realname, $body_email);
			$body_email = str_replace("[site:name]", $site_name, $body_email);
			$body_email = str_replace("[editor:name]", $current_user_name, $body_email);
			
			$body_email = str_replace("[group:name]", $group_name, $body_email);
			//$body_email= str_replace("\n", "</br>", $body_email);
			
			$body_email  = html_entity_decode( $body_email);
			$body_email = render($body_email);
			
			//drupal_set_message("send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---", 'error');
			//I'm not to send an email to me
			//if ($current_uid!=$uid) {
				//drupal_set_message("send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---", 'error');
				pos_send_custom_email($mail, $subject_email, $body_email, $key);	
			//}
					
        }
	}
	//else {
	//	drupal_set_message("-sending email false<---", 'error');
	//}
	
	//drupal_set_message("Out pos_group_notification_request_publication!!!", 'error');
	return true;	
}


//function that checks if the publication message email need to be sended, and send it
function pos_group_notification_published_group(array $form, FormStateInterface $form_state) {
	//drupal_set_message("IN pos_group_notification_request_publication!!!", 'error');
	
    $pos_field_publish_previous_status = $form_state->getValue('pos_field_publish_previous_status');

	if (array_key_exists('field_publish', $form)) {
		$new_field_publish_value = $form_state->getValue('field_publish');		
		$new_field_publish_value = $new_field_publish_value['value'];
	}

	if (array_key_exists('pos_field_publish_previous_status', $form)) {
		$previous_field_publish_value = $form_state->getValue('pos_field_publish_previous_status');
		//drupal_set_message("IN --previous_field_publish_value:".$previous_field_publish_value."<---", 'error');
		//$previous_field_publish_value = $previous_field_publish_value['value'];		
	}
	else {
		$previous_field_publish_value = $new_field_publish_value;
	}

	$field_qa_approved = 0;		
	if (array_key_exists('field_qa_approved', $form)) {
		$field_qa_approved = $form_state->getValue('field_qa_approved');		
		$field_qa_approved = $field_qa_approved['value'];
	}
	//if $field_qa_approved == 0 -> reject
	//if $field_qa_approved == 1 -> accept
		
    //drupal_set_message("-previous_field_publish_value value ->".$previous_field_publish_value."<---", 'error');
	//drupal_set_message("-new_field_publish_value value ->".$new_field_publish_value."<---", 'error');

	//send an email if:
	// * after update a group and field_publish change from 0 to 1
	
	$entity = $form_state->getFormObject()->getEntity();
	
	$sendEmail = False;
	//Used when user changes the “approval requested” to true and qa approved is true.
	if ($field_qa_approved == 1) {
		if (($previous_field_publish_value==0) && ($new_field_publish_value==1)) {
			$sendEmail = True;
		}
	}
	
	//$sendEmail = True;
	
	//drupal_set_message("-change condition to send email<---", 'error');
	if ($sendEmail==True) {
		//drupal_set_message("-sending email true<---", 'error');
		
		$config =  \Drupal::config('pos_group_notifications.settings');
		$pos_group_notifications_request_publication_subject = $config->get('pos_group_notifications_publication_subject');
		$pos_group_notifications_request_publication_body = $config->get('pos_group_notifications_publication_body');

		global $base_url;
		$host = $base_url;

		// access to the main site data
		$system_site_config = \Drupal::config('system.site');
 		$site_email = $system_site_config->get('mail');
		$site_name = $system_site_config->get('name');
		
		$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_request_publication_subject);

		$current_uid = \Drupal::currentUser()->id();
		 		
		$current_user = User::load($current_uid);
		
		$current_user_name = $current_user->get('field_real_name')->value;
				
		$gid = $entity->id[0]->value;
		$group = Drupal\group\Entity\Group::load($gid);	
				
		$group_name = $form_state->getValue('label');
		$group_name = $group_name[0]['value'];
		
		$group_name ="<a href='".$host."/group/".$gid."'>".$group_name."</a>";
		
		//The list of members to notify are the ones that belong to the uid configured in pos_group_notifications_request_publication_role_to_notify
		//$group_members = $group->getMembers();
		//
		$pos_group_notifications_request_publication_role_to_notify = $config->get('pos_group_notifications_request_publication_role_to_notify');
		//drupal_set_message("-gid-->".$pos_group_notifications_request_publication_role_to_notify."<---", 'error');
		$group_members = pos_group_notifications_get_list_of_members_by_role_name($pos_group_notifications_request_publication_role_to_notify);

		$key = 'pos_group_notifications_published_group';

		foreach ($group_members as $user) {
    		//$user = $member->getUser();
			
			$uid = $user->get('uid')->value;
    		$realname = $user->get('field_real_name')->value;
			$mail = $user->get('mail')->value;
			
			//drupal_set_message("--uid-->".$uid."<---realname-->".$realname."<---", 'error');
    				
			//$usersToSenNotification[] = array("uid"=>$uid, "mail"=> $mail, "realname" => $realname );
			
			//$body_email = "send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---";
			$body_email = $pos_group_notifications_request_publication_body;
			
			$body_email = str_replace("[user:display-name]", $realname, $body_email);
			$body_email = str_replace("[site:name]", $site_name, $body_email);
			$body_email = str_replace("[editor:name]", $current_user_name, $body_email);
			
			$body_email = str_replace("[group:name]", $group_name, $body_email);
			//$body_email= str_replace("\n", "</br>", $body_email);
			
			$body_email  = html_entity_decode( $body_email);
			$body_email = render($body_email);
			
			//drupal_set_message("send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---", 'error');
			//I'm not to send an email to me
			//if ($current_uid!=$uid) {
				//drupal_set_message("send an email to--uid-->".$uid."<---realname-->".$realname."<---email-->".$mail."<---", 'error');
				pos_send_custom_email($mail, $subject_email, $body_email, $key);	
			//}
					
        }
	}
	//else {
	//	drupal_set_message("-sending email false<---", 'error');
	//}
	
	//drupal_set_message("Out pos_group_notification_request_publication!!!", 'error');
	return true;	
}

//function that checks if the reject or the accept email needs to be sended, and send it
function pos_group_notification_accept_reject(array $form, FormStateInterface $form_state) {
	//drupal_set_message("IN pos_group_notification_accept_reject!!!", 'error');
	
	//Reject is when an editor (user with the administration role) save a trial/solution with the field 'QA approved?' unchecked and the QA comments text changes.    
	
	//check if the current user is an editor (administrator)
	$isCurrentUserAnAdmin = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())->hasRole('administrator');
	if ($isCurrentUserAnAdmin) {
		//recover data frils qa_approved
		$field_qa_approved = 0;		
		if (array_key_exists('field_qa_approved', $form)) {
			$field_qa_approved = $form_state->getValue('field_qa_approved');		
			$field_qa_approved = $field_qa_approved['value'];
		}
		
		//drupal_set_message("--field_qa_approved:".$field_qa_approved, 'error');
		
		//recover data field qa_comments
		$field_qa_comments = "";
		if (array_key_exists('field_qa_comments', $form)) {
			$field_qa_comments = $form_state->getValue('field_qa_comments');
			$field_qa_comments = $field_qa_comments[0]['value'];
		}
		
		//recover preivious qa comments status
    	$pos_field_publish_previous_status = $form_state->getValue('pos_field_publish_previous_status');
		$pos_field_qa_comments_previous_status = $form_state->getValue('pos_field_qa_comments_previous_status');
			
		//if $field_qa_approved == 0 -> reject
		//if $field_qa_approved == 1 -> accept
		$action = "";
		$sendEmail = false;
		$reason = ""; 
		//check status of the field	field_qa_approved
		if ($field_qa_approved == 0) {
			$action = "reject";
			//if user rejects only send email if field field_qa_comments has been updated			
			//drupal_set_message("IN comments:".$field_qa_comments, 'error');
			//drupal_set_message("IN previous comments:".$pos_field_qa_comments_previous_status, 'error');
			if ($field_qa_comments!=$pos_field_qa_comments_previous_status) {
				$reason = $field_qa_comments;
				$sendEmail = true;
			}		
		}
		else if ($field_qa_approved == 1) {
			//mmp
			//only send an email if field_QA_approved change from 0 to 1. We can check this chenkiong the value of pos_field_QA_approved_previous_status
			$pos_field_QA_approved_previous_status = $form_state->getValue('pos_field_QA_approved_previous_status');
			
			//drupal_set_message("pos_field_QA_approved_previous_status:".$pos_field_QA_approved_previous_status, 'error');
			
			if ($pos_field_QA_approved_previous_status!=$field_qa_approved) {
				$action = "accept";
				$sendEmail = true;
			}
		}
		
		//$sendEmail = true;
		if ($sendEmail) {
			//drupal_set_message("send email", 'error');
			//the group owner/team must receive an e-mail.
			//$group = \Drupal\group\Entity\Group::load(65);
			$group = $form_state->getFormObject()->getEntity();
		
			$gid = $group->id[0]->value;
			$glabel = $group->label[0]->value;
			
			//drupal_set_message("--gid:".$gid, 'error');
			//drupal_set_message("--glabel:".$glabel, 'error');
			
			$key = 'pos_trial_solution_accepted_rejected';
			
			$subject_email = "";
			$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings
			
			if ($action == "accept") {
				$subject_email = $config->get('pos_group_notifications_accept_solution_trial_subject');
			}
			else if ($action == "reject") {
				$subject_email = $config->get('pos_group_notifications_reject_solution_trial_subject');
			}
			
			// access to the main site data
			$system_site_config = \Drupal::config('system.site');
			$site_name = $system_site_config->get('name');
			
			$subject_email = str_replace("[site:name]", $site_name, $subject_email);
			$subject_email = PlainTextOutput::renderFromHtml($subject_email);
			
			global $base_url;
			$host = $base_url;
			
			$members = $group->getMembers();
			foreach ($members as $member) {
				$user = $member->getUser();
				$uid = $user->get('uid')->value;
    			$realname = $user->get('field_real_name')->value;
				$mail = $user->get('mail')->value;

				$body_email = "";
				if ($action == "accept") {
					$body_email = $config->get('pos_group_notifications_accept_solution_trial_body');
				}
				else if ($action == "reject") {
					$body_email = $config->get('pos_group_notifications_reject_solution_trial_body');
				}
						
				$body_email = str_replace("[user:display-name]", $realname, $body_email);
				$body_email = str_replace("[site:name]", $site_name, $body_email);

				$group_name ="<a href='".$host."/group/".$gid."'>".$glabel."</a>";				
				$body_email = str_replace("[item:url]", $group_name, $body_email);
				
				$body_email = str_replace("[reason]", $reason, $body_email);

				//$body_email= str_replace("\n", "</br>", $body_email);

				$body_email  = html_entity_decode( $body_email);
				$body_email = render($body_email);			
				//drupal_set_message("send an email to:".$mail, 'error');
				pos_send_custom_email($mail, $subject_email, $body_email, $key);
											
			}
		}
		else {
			//we don't send emails
			//drupal_set_message("NO EMAIL!!", 'error');
		}
		
	}

		
	//drupal_set_message("Out pos_group_notification_accept_reject!!!", 'error');
	return true;	
}


function pos_group_notifications_submit_feedback_group_form(array $form, FormStateInterface $form_state) {
	
	//drupal_set_message("IN pos_group_notifications_submit_feedback_group_form!!!", 'error');

	//approve data
	$field_approve_feedback = $form_state->getValue('field_approve_feedback');		
	$field_approve_feedback = $field_approve_feedback['value'];
	
	$pos_field_approve_feedback_previous_status = $form_state->getValue('pos_field_approve_feedback_previous_status');		
	//$pos_field_approve_feedback_previous_status = $pos_field_approve_feedback_previous_status['value'];
	
	//drupal_set_message("field_approve_feedback:".$field_approve_feedback, 'error');
	//drupal_set_message("pos_field_approve_feedback_previous_status:".$pos_field_approve_feedback_previous_status, 'error');
	
	//reply data
	$field_reply = $form_state->getValue('field_reply');		
	$field_reply = $field_reply[0]['value'];
	$field_reply = trim($field_reply);
		
	$pos_field_reply_previous_status = $form_state->getValue('pos_field_reply_previous_status');
	$pos_field_reply_previous_status = trim($pos_field_reply_previous_status);
	
	//drupal_set_message("field_reply--->".$field_reply."<---", 'error');
	//drupal_set_message("pos_field_reply_previous_status-->".$pos_field_reply_previous_status."<----", 'error');
	
	$entity = $form_state->getFormObject()->getEntity();
	$entity_id = $entity->id[0]->value;
	$author_id = $entity->uid[0]->target_id;	
	$entity_gid = $entity->gid[0]->target_id;
	//drupal_set_message("entity_id=".$entity_id, 'error');
	//drupal_set_message("author_id=".$author_id, 'error');
	//drupal_set_message("entity_gid=".$entity_gid, 'error');
	

	//$field_reply = $form_state->getValue('field_reply');
	//$field_reply = $entity->field_reply[0]->value;
	/*
	foreach ($entity as $k=>$v) {
		drupal_set_message("entity - k=".$k."<-----", 'error');
	}
	*/
	//$field_reply = $field_reply['value'];
	
	$sendEmail = False;
	$sendEmailAproved = False;
	$sendEmailReply = False;
	
	//field_approve_feedback = 1 and pos_field_approve_feedback_previous_status = 0 this means that the user approved the content  
	if (($field_approve_feedback==1) && ($pos_field_approve_feedback_previous_status==0)) {
		//drupal_set_message("An mail to the owner is needed to inform him that the feedback has been aproved", 'error');
		$sendEmail = True;
		$sendEmailAproved = True;
	}
	if ($field_reply!=$pos_field_reply_previous_status) {
		//drupal_set_message("An mail to the owner is needed to inform him that an answer is given", 'error');
		$sendEmail = True;
		$sendEmailReply = True;
	}
		
	if ($sendEmail) {
			
		$config =  \Drupal::config('pos_group_notifications.settings');
		$pos_group_notifications_request_publication_subject = $config->get('pos_group_notifications_request_publication_subject');
		$pos_group_notifications_request_publication_body = $config->get('pos_group_notifications_request_publication_body');		
		$pos_group_notifications_feedback_published_enabled = $config->get('pos_group_notifications_feedback_published_enabled');
		$pos_group_feedback_answer_is_given_enabled = $config->get('pos_group_feedback_answer_is_given_enabled');
		
		global $base_url;
		$host = $base_url;

		// access to the main site data
		$system_site_config = \Drupal::config('system.site');
 		$site_email = $system_site_config->get('mail');
		$site_name = $system_site_config->get('name');

		$author_user = User::load($author_id);
				
		$uid = $author_user->get('uid')->value;
    	$realname = $author_user->get('field_real_name')->value;
		$mail = $author_user->get('mail')->value;
			
		if ($sendEmailAproved) {
			
			if ($pos_group_notifications_feedback_published_enabled==1) {
				$key = 'pos_group_notifications_feedback_published';
				
				$pos_group_notifications_feedback_published_subject = $config->get('pos_group_notifications_feedback_published_subject');	
				$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_feedback_published_subject);
				
				$pos_group_notifications_feedback_published_body = $config->get('pos_group_notifications_feedback_published_body');
				$body_email = $pos_group_notifications_feedback_published_body;		
				$body_email = str_replace("[user:display-name]", $realname, $body_email);
				$body_email = str_replace("[site:name]", $site_name, $body_email);
				$body_email = str_replace("[feedback:url]", '<a href="'.$host.'/PoS/solution/'.$entity_gid.'/content/'.$entity_id.'">'.$host.'/PoS/solution/'.$entity_gid.'/content/'.$entity_id.'</a>', $body_email);			
				
				pos_send_custom_email($mail, $subject_email, $body_email, $key);
			}
		}
		
		if ($sendEmailReply) {
			
			if ($pos_group_feedback_answer_is_given_enabled==1) {
				$key = 'pos_group_notifications_feedback_answered';
	
				$pos_group_notifications_feedback_answered_subject = $config->get('pos_group_notifications_feedback_answered_subject');	
				$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_feedback_answered_subject);
				
				$pos_group_notifications_feedback_answered_body = $config->get('pos_group_notifications_feedback_answered_body');
				$body_email = $pos_group_notifications_feedback_answered_body;		
				$body_email = str_replace("[user:display-name]", $realname, $body_email);
				$body_email = str_replace("[site:name]", $site_name, $body_email);
				$body_email = str_replace("[feedback:url]", '<a href="'.$host.'/PoS/solution/'.$entity_gid.'/content/'.$entity_id.'">'.$host.'/PoS/solution/'.$entity_gid.'/content/'.$entity_id.'</a>', $body_email);
				
				pos_send_custom_email($mail, $subject_email, $body_email, $key);
			}
		}
		
	}
		
	//drupal_set_message("OUT pos_group_notifications_submit_feedback_group_form!!!", 'error');
}

function pos_group_notifications_submit_group_form(array $form, FormStateInterface $form_state) {

	//drupal_set_message("IN pos_group_notifications_submit_group_form!!!", 'error');
	
	//we must check if we need to send one of this e-mails.
	// * request_publication: When group owner/team member sets the "Request publication", the site editor(s) should receive an e-mail
	// * or reject or accept trial/solution
	//		- reject item: Reject is when an editor (user with the administration role) save a trial/solution with the field 'QA approved?' unchecked and the QA comments text changes.
	//      - accept item: When editor checks the field QA approved?
	
	//function that checks if the request_publication email need to be sended, and send it
	$result = pos_group_notification_request_publication($form, $form_state);
	
	//function that checks if the published group email need to be sended, and send it
	$result = pos_group_notification_published_group($form, $form_state);
	
	//function that checks if the reject or the accept email needs to be sended, and send it
	$result = pos_group_notification_accept_reject($form, $form_state);
	
	//drupal_set_message("OUT pos_group_notifications_submit_group_form!!!", 'error');
	
}

function pos_getGroupContentByGID_and_uid($idin, $uid, $executionType) {
		
	//drupal_set_message("pos_getGroupContentByGID_and_uid idin=".$idin."---uid=".$uid."<----executionType-->".$executionType."<----", 'error');
	
	//change tu current user account to access correctly to the view to recover the timestamp that tell us the last time the user access to the node	
	$accountSwitcher = \Drupal::service('account_switcher');
    $account = \Drupal\user\Entity\User::load($uid);
	$accountSwitcher->switchTo($account);
	
	$account = \Drupal::currentUser();
	
	/*	
  	if ($account->id() == 1) {
		drupal_set_message("***----".rand(1, 150)."---Hiya, boss!", 'error');
  	}
  	else {
  		drupal_set_message("***----".rand(1, 150)."---You are not the site administrator.", 'error');
  	}	
	drupal_set_message("________---->".$account->id()."<----", 'error');
	*/
	
	//recover data from the view
	//$view = Views::getView('group_nodes');
	$view = Views::getView('pos_notification_group_nodes');
	
	//recover the timestamp of the last crun run	
	$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings
	
	if ($executionType=='reminder') {
		
		$pos_group_notifications_last_run = new DrupalDateTime( $config->get('pos_group_notifications_last_reminder_execution'));
	}
	else {
		$pos_group_notifications_last_run = $config->get('pos_group_notifications_last_run');	
	}
	
	
	//if there is data in pos_group_notifications_last_run we inform the filter changed date
	if ($pos_group_notifications_last_run) {
		
		//drupal_set_message(rand(1, 150)."---dins!!!--pos_group_notifications_last_run=".$pos_group_notifications_last_run, 'error');
		$dtime = DateTime::createFromFormat('Y-m-d H:i:s e', $pos_group_notifications_last_run);
		$timestamp = $dtime->getTimestamp();
		$timestamp_as_date = gmdate("Y-m-d H:i:s", $timestamp);
		
		$query = [
		    'changed' => $timestamp_as_date,
		
		];
		
		$view->setExposedInput($query);
		
	}

	$view->setDisplay('default');

	//set the gid into the view arguments	
	$view->setArguments([$idin]);

	// Execute the view.
	$view->execute();
	
	//get the returned rows
	$rows = $view->total_rows;
			
	//return to the previous user account		  	
	$accountSwitcher->switchBack();
	
	
	$dataToReturn = array();
		
	foreach ($view->result as $row) {
		//drupal_set_message(rand(1, 150)."---mmp row->nid:".$row->nid,"error");
		//load node by nid    
		$node = Node::load($row->nid);
		
		//get some data from node		
		$nodeTitle = $node->get('title')->value;
		$nodeCreated = $node->getCreatedTime();
		$nodeChanged = $node->getChangedTime();
      
		//last node read is the date in the view as timestamp
		$last_read = $nodeChanged;
		$last_comment = $nodeChanged;
		
		$last_read = $view->field['timestamp']->getValue($row);
		
		$changed = $nodeChanged;
		
		//check if node has been readed from user acording timestamps		
		$mark = "MARK_READ";
		if (!$last_read && $changed > POS_HISTORY_READ_LIMIT) {
        	$mark = "MARK_NEW";
      	}
		elseif ($nodeChanged > $last_read && $changed > POS_HISTORY_READ_LIMIT) {
        	$mark = "MARK_UPDATED";
      	}
		/*
      	elseif ($last_comment > $last_read && $last_comment > POS_HISTORY_READ_LIMIT) {
        	$mark = "MARK_UPDATED";
      	}
		*/
		
		/*
		//old version, it was before to use the view filter by changed date
		$canAdd = False;		
		if ($timestamp!="") {
			if ($nodeChanged>=$timestamp) {
				$canAdd = True;
			}
		}
		else {
			$canAdd = True;
		}
		*/
		
		//old version, it was before to use the view filter by changed date
		//if (($canAdd==True) && ($mark!="MARK_READ")) {
			
		//only nodes that has not been readed fomr user will be added in th list of nodes	
		if ($mark!="MARK_READ") {
			
			$dataToReturn[] = array("nid"=> $row->nid, "title"=> $nodeTitle, "mark"=>$mark);
		}
		
	}
	
	
	return $dataToReturn;	
}



function pos_getGroupsByUser($user, $executionType) {
	
	$dataToReturn = array();	
	$dataToReturnByGroup = array();
	$uid = $user->get('uid')->value;
	$mail = $user->get('mail')->value;
	$name = $user->get('name')->value;
	$realname = $user->get('field_real_name')->value;
	
	$login = $user->get('login')->value;
	$access = $user->get('access')->value;
	
	$data = 'uid:'.$uid.'---mail:'.$mail.'----realname:'.$realname.'----name:'.$name.'-----login:'.$login.'----last access:'.$access.'---';

	$grp_membership_service = \Drupal::service('group.membership_loader');
	$grps = $grp_membership_service->loadByUser($user);

	foreach ($grps as $grp) {
		$goupData = $grp->getGroup();		
		//drupal_set_message($data."-------gid=".$goupData->id()."-------uuid=---".$goupData->uuid()."------label=---".$goupData->label()."----", 'error');
		$dataByUser = pos_getGroupContentByGID_and_uid($goupData->id(), $uid, $executionType);
		$dataToReturnByGroup[] = array("gid" => $goupData->id(), "glabel" => $goupData->label(), "gdata" => $dataByUser);


     }	
     
	 if (sizeof($dataToReturnByGroup)>0){
	 	$dataToReturn = array("uid"=>$uid, "mail"=> $mail, "realname" => $realname, "dataByGroup" => $dataToReturnByGroup );
	 }
     return $dataToReturn;
}

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 */
  
function pos_group_notifications_cron() {
	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 1 A--", 'error');
	pos_group_notifications_start_cron_tasks();
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 1 B--", 'error');
	
}

function pos_group_notifications_start_cron_tasks() {
			
	
	//drupal_set_message("***----".rand(1, 150)."--hola 1--pos_group_notifications_start_cron_tasks", 'error');

	//drupal_set_message('pos_group_notifications_cron', 'error');
	
	
	//we must check if is necessary to send the reminder email or the periodicall email
	//reminder email is on per month with th data publishec in that month
	//periodical is te one executed in each cron task an just the latests documents published since the last execution
	//the reminder will use onother subject and another email and will use the first day of the month as started point

		//today is last day of the month?
		//$today_date = strtotime(date('Y-m-d H:i:s'));		
		
		
		$config = \Drupal::service('config.factory')->getEditable('pos_group_notifications.settings');
		$today_date = date('Y-m-d');
		//$today_date = date('Y-m-t');
				
		//drupal_set_message('today_date:'.$today_date, 'error');		
		//$last_day_of_the_month = strtotime(date('Y-m-t 00:00:00'));
		$last_day_of_the_month = date('Y-m-t');
		//drupal_set_message('last_day_of_the_month:'.$last_day_of_the_month, 'error');
		
		$sendReminder = False;
		//if (1==1) {
		if ($last_day_of_the_month==$today_date) {
			//we need to check if we send the reminder this month
			//drupal_set_message('last_day_of_the_month = today_date we need to check if the reminder has been sended this month', 'error');
			$pos_group_notifications_last_reminder_execution = $config->get('pos_group_notifications_last_reminder_execution');
			
			//drupal_set_message('pos_group_notifications_last_reminder_execution:'.$pos_group_notifications_last_reminder_execution, 'error');
			
			if ($pos_group_notifications_last_reminder_execution) {
				
				if ($pos_group_notifications_last_reminder_execution==$today_date) {
					//the reminder has been sended this month, we don't need to send it again
					//drupal_set_message("the reminder has been sended this month, we don't need to send it again", 'error');
					$sendReminder = False;
				}
				else {
					//we must send the reminder because the send date is different
					//drupal_set_message('we must send the reminder because the send date is different', 'error');
					$sendReminder = True;
				}
			}	
			else {
				//we never execute this reminder then we must do it
				//drupal_set_message('we never execute this reminder then we must do it', 'error');
				$sendReminder = True;
			}
		}
		else {
			//last_day_of_the_month != today_date reminder is not sended
			//drupal_set_message('last_day_of_the_month != today_date reminder is not sended', 'error');
			$sendReminder = False;
		}
		
		//if (1==1) {
		if ($sendReminder==True) {
			
			//send expiring items
			pos_group_notifications_send_emails_expiring_items();
			
			//drupal_set_message('Sending REMINDER', 'error');
			$first_day_of_the_month = date('Y-m-01');
			
			$result = pos_group_notifications_send_emails('reminder');
			
			//check if the validation group emaul must be sended
			$pos_group_notifications_group_validation_error_enabled = $config->get('pos_group_notifications_group_validation_error_enabled');
			if ($pos_group_notifications_group_validation_error_enabled==1) {
				//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron pos_group_notifications_group_validation_error_enabled is enabled!!!!!!!--", 'error');
				$result = pos_group_notifications_send_emails_groups_with_validation_errors();	
			}
			
			$config->set('pos_group_notifications_last_reminder_execution', $today_date);
			$config->save();		
			
		}
		else {
			//drupal_set_message('Sending normal email', 'error');
			$result = pos_group_notifications_send_emails('periodical');
		}
		
	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 1 A--", 'error');
	    
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 1 B--", 'error');
	
	//update last run date	
	//$config = \Drupal::service('config.factory')->getEditable('pos_group_notifications.settings');	
	$date = new DateTime();
	$new_last_run_date = date('Y-m-d H:i:s e', $date->getTimestamp());
	
	$config->set('pos_group_notifications_last_run', $new_last_run_date);
	$config->save();

	try{
		$last_weekly_notification = $config->get('pos_group_notifications_last_weekly_notification');
	}		
	catch (Exception $e) {    	
		$last_weekly_notification = 0;
	}
	//$last_weekly_notification = 0;
	//drupal_set_message("***----".rand(1, 150)."--last_weekly_notification--".$last_weekly_notification, 'error');

	if ($last_weekly_notification <= strtotime('-1 week')) {
        //drupal_set_message("***----".rand(1, 150)."--in if...->".strtotime('-1 week')."<----", 'error');
		//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 3 A--", 'error');
		$result = pos_group_notifications_send_emails_solution_trial_not_published();	
		//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 3 B--", 'error');	  
	  	$config->set('pos_group_notifications_last_weekly_notification', time());
	  	$config->save();
    }
	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 2 A--", 'error');
	$result = pos_group_notifications_send_emails_qa_groups_not_empty();
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron 2 B--", 'error');
	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron pos_group_notifications_group_validation_error_enabled A--", 'error');
	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron pos_group_notifications_group_validation_error_enabled B--", 'error');

	
	//drupal_set_message("***----".rand(1, 150)."--pos_group_notifications_cron pos_group_notifications_group_validation_error_enabled C--", 'error');	
	
	//drupal_set_message("***----".rand(1, 150)."--hola 2--pos_group_notifications_start_cron_tasks", 'error');
		
}




function pos_group_notifications_get_list_of_members_by_role_name($role_name) {
	
	//drupal_set_message('pos_group_notifications_get_list_of_members_by_role_name. role_name='.$role_name.'----', 'error');
	
	$ids = \Drupal::entityQuery('user')
	->condition('status', 1)
	->condition('roles', $role_name)
	->execute();
	$users = User::loadMultiple($ids);
	
	return $users;
}


function pos_getListGroupsByUser($user) {

	$dataToReturn = array();	
	$dataToReturnByGroup = array();
	$uid = $user->get('uid')->value;
	$mail = $user->get('mail')->value;
	$name = $user->get('name')->value;
	$realname = $user->get('field_real_name')->value;
	
	//drupal_set_message("pos_getListGroupsByUser uid:".$uid, 'error');
	
	$login = $user->get('login')->value;
	$access = $user->get('access')->value;
	
	$data = 'uid:'.$uid.'---mail:'.$mail.'----realname:'.$realname.'----name:'.$name.'-----login:'.$login.'----last access:'.$access.'---';

	$grp_membership_service = \Drupal::service('group.membership_loader');
	$grps = $grp_membership_service->loadByUser($user);
    
	$urolesMemberList = array();
	
	foreach ($grps as $grp) {
		$goupData = $grp->getGroup();
		
		$gtype = "";
					
		$urolesMemberList = array();
		
		$gtype=$goupData->type[0]->target_id;
		
		//drupal_set_message("***....uid:".$uid."-------gid=".$goupData->id()."---label-->".$goupData->label()."<----type-->".$gtype."<----", 'error');
		
		$members = $goupData->getMembers();

		$urolesMemberList =[];
		
		foreach ($members as $member) {
			$userMember = $member->getUser();
			$uidMember = $userMember->get('uid')->value;
			if ($uid==$uidMember) {
				//drupal_set_message("Same user uid:".$uid."---uidMember:".$uidMember, 'error');
				$urolesMember = $member->getRoles();	
				
				foreach ($urolesMember as $roleK => $roleV) {
					//drupal_set_message("user role roleK-->".$roleK."<---roleV-->".print_r($roleV,true)."<---uidMember:".$uidMember, 'error');
					//drupal_set_message("user role roleK-->".$roleK."<------uidMember:".$uidMember, 'error');
					$urolesMemberList[] = $roleK;
				}
				
			}			
		}
			
		//drupal_set_message("***uid:".$uid."-------gid=".$goupData->id()."-------uuid=---".$goupData->uuid()."------label=---".$goupData->label()."----sizeof:".sizeof($urolesMemberList), 'error');		
		$dataToReturnByGroup[] = array("gid" => $goupData->id(), "glabel" => $goupData->label(), "gtype" => $gtype, "roles" => $urolesMemberList);


     }	
     
	 if (sizeof($dataToReturnByGroup)>0){
	 	$dataToReturn = array("uid"=>$uid, "mail"=> $mail, "realname" => $realname, "dataByGroup" => $dataToReturnByGroup );
	 }
     return $dataToReturn;
}


function pos_group_notifications_send_emails_groups_with_validation_errors() {
	//drupal_set_message('pos_group_notifications_send_emails_groups_with_validation_errors', 'error');
	//select all users
	//get all their groups that belong to the group type enabled
	//check if user has the appropiate role
	//check if group has some validation error
	$ids = \Drupal::entityQuery('user')
		->condition('status', 1)  
		->execute();

	$users = User::loadMultiple($ids);
	$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings	

	// access to the main site data
	$system_site_config = \Drupal::config('system.site');
	$site_name = $system_site_config->get('name');	
	
	global $base_url;
	$host = $base_url;
		
	$semaforo = 0;
	foreach($users as $user){
		//recover data per user (their groups and the latest nodes)
		//if ($semaforo<30) {
			$dataToProcess[] = pos_getListGroupsByUser($user);
			$semaforo = $semaforo + 1;
		//}
	}
	
	foreach($dataToProcess as $data){
		//each row has the data per a user
		if (array_key_exists('uid', $data)) {
			//drupal_set_message('uid--->'.$data['uid']."---", 'error');
			//drupal_set_message('realname--->'.$data['realname']."---", 'error');
			//drupal_set_message('mail--->'.$data['mail']."---", 'error');
			
			//drupal_set_message($data['uid'].'-sizeof 0--->'.sizeof($data['ugroles'])."---", 'error');
			
			//drupal_set_message($data['uid'].'-sizeof 1--->'.sizeof($data['dataByGroup'])."---", 'error');
			//drupal_set_message($data['uid'].'-sizeof 2--->'.sizeof($data['dataByGroup']['roles'])."---", 'error');
			
			//foreach ($data['ugroles'] as $k1 => $v1) {
			//	drupal_set_message($data['gid'].'--k1--->'.$k1."---".$v1, 'error');
			//}
			
			$arrayGroupsToBuild = array();
			
			
			foreach($data['dataByGroup'] as $dataGroup) {
				//in each row we have the data of the user groups
				$enambledGroups = $config->get('pos_group_notifications_group_validation_configgroups');
								
				//drupal_set_message($data['uid'].'-sizeof 33 roles of the user in this group--->'.sizeof($dataGroup['roles'])."---", 'error');
				//only if the user belong to one of the selected roles into the config must receive an email
								
				//drupal_set_message($dataGroup['gid']."--".$dataGroup['gtype'], 'error');
				//foreach($enambledGroups as $k=>$v) {
				//	drupal_set_message($dataGroup['gid']."--enambledGroups---".$k."--".$v, 'error');
				//}
				
				if (array_key_exists($dataGroup['gtype'], $enambledGroups)) {
    				//grup type in array, let's check is is enabled
    				//drupal_set_message($dataGroup['gid']." --- DINS 1!!!", 'error');
    				//drupal_set_message($dataGroup['gid']."--".$config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['group'],'error');
					
					$defaultValueCheckboxes = array();
					foreach ($config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['rolesbygroup'] as $k_item=> $v_item) {
						if ($k_item===$v_item) {				
							array_push($defaultValueCheckboxes, $v_item);
							//drupal_set_message('uid:'.$data['uid'].'-gid:'.$dataGroup['gid'].'- role selected in group type ->'.$dataGroup['gtype'].'<--->'.$v_item.'<----------','error');
						}
					}
					
					
					//drupal_set_message($data['uid'].'- number of roles selected in this group type ->'.$dataGroup['gtype'].'<--->'.sizeof($defaultValueCheckboxes)."---", 'error');
					
    				if ($config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['group']==1) {
    					//This group an be processed.
    					//drupal_set_message($dataGroup['gid']." --- DINS 2!!!--".$dataGroup['gtype'], 'error');
						//drupal_set_message('.....uid--->'.$data['uid'].'---gid--->'.$dataGroup['gid']."--glabel--->".$dataGroup['glabel']."--gtype--->".$dataGroup['gtype']."---roles-->".print_r($dataGroup['roles'],true)."<---", 'error');
						
						
						$userHasRoleInThisGroup = False;
						foreach ($dataGroup['roles'] as $rk=> $rv) {
							//drupal_set_message('uid:'.$data['uid'].'-gid:'.$dataGroup['gid'].'-****users roles --->'.(string) $rk.'<-->'.(string) $rv.'<---','error');
							
							foreach ($config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['rolesbygroup'] as $k_item=> $v_item) {
								if ($k_item===$v_item) {
									
									
									$pos = strpos(strtolower($rv), strtolower($v_item));
	
									if ($pos === false) {
									}
									else {
										$userHasRoleInThisGroup = True;
									}
									
									//drupal_set_message('uid:'.$data['uid'].'-gid:'.$dataGroup['gid'].'-****v_item --->'.(string) $v_item.'<-----rv---->'.(string) $rv.'<---pos:'.(string) $pos."<---",'error');
								}
								
							}
						}
						if (!$userHasRoleInThisGroup) {
							//user without valid role for this group
							//drupal_set_message('uid:'.$data['uid'].'-gid:'.$dataGroup['gid'].'-****Use not in the list of valid roles of the  group<---','error');
						}
						else {
							//user has some valid role for this group
							//drupal_set_message('uid:'.$data['uid'].'-gid:'.$dataGroup['gid'].'-****User has a valid role in this group<---','error');

							$viewIdToUse = $config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['viewId'];
							$displayIdToUse = $config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['displayId'];
							$sentenceToCheck = $config->get('pos_group_notifications_group_validation_configgroups')[$dataGroup['gtype']]['sentence'];
			
							//drupal_set_message('****$viewIdToUse--->'.$viewIdToUse.'--','error');
							//drupal_set_message('****$displayIdToUse--->'.$displayIdToUse.'--','error');
							
							
							//$view = Views::getView("trial_validation");
							$view = Views::getView($viewIdToUse);
							
							$arguments = [$dataGroup['gid']];
			
						    if (is_object($view)) {
						        //$view->setDisplay('block_validation');
						        $view->setDisplay($displayIdToUse);
						        $view->setArguments($arguments);
						        $view->execute();
						
						        // Render the view
						        $myRenderedView = $view->render();
						        //$result = \Drupal::service('renderer')->render($view->render());
						        $result = \Drupal::service('renderer')->render($myRenderedView);
						
						  
						  		if(is_object($result)) {
						        	$dataArray = (array) $result;
									
									foreach ($dataArray as $k=>$v) {							
										$pos = strpos(strtolower($v), strtolower($sentenceToCheck));
										
										if ($pos!==False) {
											//drupal_set_message($dataGroup['gid'].'***The group is buildt properly<----','error');
										}
										else {
											$arrayGroupsToBuild[] = ['gid'=>$dataGroup['gid'], 'glabel'=>$dataGroup['glabel'], 'error'=>$v, 'gtype'=>$dataGroup['gtype']];
										}
										
									}
								}
							}
						}
					}
				}
			
			}
			
			//drupal_set_message('uid:'.$data['uid'].'<---sizeof(arrayGroupsToBuild):'.sizeof($arrayGroupsToBuild)."<---",'error');
			if (sizeof($arrayGroupsToBuild)>0) {
				//user has groups error
				
				$dynamic_content = "";
				foreach ($arrayGroupsToBuild as $k=>$v) {
					//drupal_set_message('uid:'.$data['uid'].'****arrayGroupsToBuild id---'.$arrayGroupsToBuild[$k]['gid']."---glabel=".$arrayGroupsToBuild[$k]['glabel']."<---",'error');
					
					$arrayGroupsToBuild[$k]['error'] = str_replace("<li>", "<br/>", $arrayGroupsToBuild[$k]['error']);
					$arrayGroupsToBuild[$k]['error'] = strip_tags($arrayGroupsToBuild[$k]['error']);

					//drupal_set_message('****arrayGroupsToBuild id---'.$arrayGroupsToBuild[$k]['gid'],'error');
					//drupal_set_message($arrayGroupsToBuild[$k]['gid'].'****arrayGroupsToBuild glabel---'.$arrayGroupsToBuild[$k]['gid'],'error');
					//drupal_set_message($arrayGroupsToBuild[$k]['gid'].'****arrayGroupsToBuild error---'.$arrayGroupsToBuild[$k]['error'],'error');
					//drupal_set_message('****arrayGroupsToBuild type---'.$arrayGroupsToBuild[$k]['type'],'error');
					
					
					//$dynamic_content .= $arrayGroupsToBuild[$k]['glabel']."---".$arrayGroupsToBuild[$k]['gid'];					
					$dynamic_content .="<a href='".$host."/group/".$arrayGroupsToBuild[$k]['gid']."'>".$arrayGroupsToBuild[$k]['glabel']."</a>";	
					$dynamic_content .= "<br/>";
					//$dynamic_content .= $arrayGroupsToBuild[$k]['error'];
				}
				
				
				$to_email = $data['mail'];		

			    $subject_email = $config->get('pos_group_notifications_group_validation_subject');
				$subject_email = str_replace("[site:name]", $site_name, $subject_email);
				
				$default_body_value = $config->get('pos_group_notifications_group_validation_body');
				
				
				$body_email = $default_body_value;
				$body_email = str_replace("[user:display-name]", $data['realname'], $body_email);
				$body_email = str_replace("[site:name]", $site_name, $body_email);
				$body_email = str_replace("[dynamic_content]", $dynamic_content, $body_email);
			
				//$body_email = str_replace("[qa:url]", '<a href="'.$host.'/QA/groups">'.$host.'/QA/groups</a>', $body_email);
						
				//drupal_set_message('uid:'.$data['uid'].'****to_email---'.$to_email,'error');
				//drupal_set_message('uid:'.$data['uid'].'****body_email---'.$body_email,'error');
				
				$key = 'pos_group_notifications_send_emails_groups_with_validation_errors'; // Replace with Your key
				
				pos_send_custom_email($to_email, $subject_email, $body_email, $key);
				
				
			}
		}
		//array("uid"=>$uid, "mail"=> $mail, "realname" => $realname, "dataByGroup" => $dataToReturnByGroup );
	}

	return True;
}


function pos_group_notifications_send_emails_qa_groups_not_empty() {
	
	/*
	Requirement: Alternatively/in addition, teh site editors should receive occasional reminder if https://pos-dev.driver-project.eu/QA/groups isn't empty.
	*/
	//drupal_set_message('pos_group_notifications_send_emails_qa_groups_not_empty', 'error');
	
	$view = Views::getView('all_groups_qa_view');
	$view->setDisplay('default');
	//$view->setExposedInput(['field_qa_approved_value' => False, 'field_publish_value' => True]);	
	//$view->setArguments(array($arg1, $arg2));

	// Execute the view.
	$view->execute();
	//get the returned rows
	$rows = $view->total_rows;
	//drupal_set_message('--rows='.$rows, 'error');
	
	//if this view has contetn, we must send email to
	//we need to evaluate the items and only send the email if there is any group with this condition:
	//  “approval requested” = true and qa approved = false 
	// field_qa_approved = qa approved
	// field_publish = “approval requested”
	$cntItemsFulfillConditions = 0;
	if ($rows>0) {

		foreach ($view->result as $row) {
			//recover data from the entity (is a group)
			$gid = $row->_entity->id();
			$group = Drupal\group\Entity\Group::load($gid);
			
			$new_gid = $group->id[0]->value;				
			
			
			$field_publish = $group->field_publish[0]->value;
			$field_qa_approved = $group->field_qa_approved[0]->value;
			
			
			if (($field_publish==1) && ($field_qa_approved==0)) {
				//drupal_set_message("Entity id:".(string) $row->_entity->id()." fulfill conditions----new_gid:".(string) $new_gid."<--field_publish:".$field_publish."<------field_qa_approved:".$field_qa_approved."<-----");
				$cntItemsFulfillConditions = $cntItemsFulfillConditions + 1;
			}
			
		}
		
	}
	
	if ($cntItemsFulfillConditions>0) {
	//if ($rows>0) {
		
		$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings		
		$subject_email = $config->get('pos_group_notifications_qa_not_empty_subject');
		
		// access to the main site data
		$system_site_config = \Drupal::config('system.site');
		$site_name = $system_site_config->get('name');		
		
		$subject_email = str_replace("[site:name]", $site_name, $subject_email);
		$subject_email = PlainTextOutput::renderFromHtml($subject_email);
		
		$body_email_notification_qa = $config->get('pos_group_notifications_qa_not_empty_body'); 
		
		global $base_url;
		$host = $base_url;
		
		//$members_list = pos_group_notifications_get_list_of_members_by_role_name('Administrator');
		
		$pos_group_notifications_qa_not_empty_role_to_notify = $config->get('pos_group_notifications_qa_not_empty_role_to_notify'); 
		
		//$members_list = pos_group_notifications_get_list_of_members_by_role_name('Administrator');
		$members_list = pos_group_notifications_get_list_of_members_by_role_name($pos_group_notifications_qa_not_empty_role_to_notify);
				
		//drupal_set_message('before foreach', 'error');
		foreach ($members_list as $user) {
			//drupal_set_message('in foreach', 'error');

			$uid = $user->get('uid')->value;
    		$realname = $user->get('field_real_name')->value;
			$to_email = $user->get('mail')->value;
			
			$body_email = $body_email_notification_qa;
			$body_email = str_replace("[user:display-name]", $realname, $body_email);
			$body_email = str_replace("[site:name]", $site_name, $body_email);
			
			$body_email = str_replace("[qa:url]", '<a href="'.$host.'/QA/groups">'.$host.'/QA/groups</a>', $body_email);
			
			//$body_email = str_replace("\n", "</br>", $body_email);
			
			$key = 'pos_group_notifications_qa_not_empty'; // Replace with Your key
			//drupal_set_message('--uid='.$uid.'----realname='.$realname.'----------mail='.$to_email.'-----', 'error');		
			
			pos_send_custom_email($to_email, $subject_email, $body_email, $key);
			
		}
		//drupal_set_message('after foreach', 'error');
	}
	
}


function pos_group_notifications_send_emails($executionType) {
	
	//drupal_set_message('pos_group_notifications_send_emails. Type execution:'.$executionType."---", 'error');
	//execute the function that recover the latest nodes and sends an email. 
	//it recover the list of enabled users, recover their groups, and send an email per user with the latest nodes published in each group
	//an email per user
		
	// We access our configuration to recover data.
	$config =  \Drupal::config('pos_group_notifications.settings');  // get saved settings
	$pos_group_notifications_testing_mode = $config->get('pos_group_notifications_testing_mode'); 
	$pos_group_notifications_primary_email = $config->get('pos_group_notifications_primary_email');
	
	
	if ($executionType=='reminder') {
		$pos_group_notifications_subject_message = $config->get('pos_group_notifications_subject_message_big_update');
		$pos_group_notifications_body_message = $config->get('pos_group_notifications_body_message_big_update');	
		$pos_group_notifications_last_run = $config->get( 'pos_group_notifications_last_reminder_execution' );
		
		$default_last_run = $config->get('pos_group_notifications_last_reminder_execution');
				
		if ($default_last_run) {
			$default_last_run = new DrupalDateTime( $config->get('pos_group_notifications_last_reminder_execution'));
		}
						
	}
	else {
			
		$pos_group_notifications_subject_message = $config->get('pos_group_notifications_subject_message');
		$pos_group_notifications_body_message = $config->get('pos_group_notifications_body_message');	
		$pos_group_notifications_last_run = $config->get( 'pos_group_notifications_last_run' );
		
		$default_last_run = $config->get('pos_group_notifications_last_run');	

		if ($default_last_run) {
			$default_last_run = new DrupalDateTime( $config->get('pos_group_notifications_last_run'));
		}

	}
	

			
	$last_cron_run = $default_last_run;
	
	
	global $base_url;
	$host = $base_url;
	
	$dataToProcess = array();
	
	// access to the main site data
	$system_site_config = \Drupal::config('system.site');
 	$site_email = $system_site_config->get('mail');
	$site_name = $system_site_config->get('name');
	    
    //recover the list of users enabled
	$ids = \Drupal::entityQuery('user')
		->condition('status', 1)  
		->execute();

	$users = User::loadMultiple($ids);

	foreach($users as $user){
		//recover data per user (their groups and the latest nodes)
		$dataToProcess[] = pos_getGroupsByUser($user, $executionType);	
	}
  

	//create an email per user with their body  
	foreach($dataToProcess as $data){
  		$message = [];

		if (array_key_exists('uid', $data)) {
			
			//drupal_set_message('--->'.$data['uid']."---", 'error');
			
			$default_body = $pos_group_notifications_body_message;
	
    		$body = "";
			$there_are_data_to_send = False;
			$cnt_groups=0;
			if ($data['dataByGroup']) {
				if (sizeof($data['dataByGroup'])>0){
	
					$user_body_data_by_group = [];
					foreach($data['dataByGroup'] as $dataByGroup){			
					
						if (sizeof($dataByGroup['gdata'])>0){
				
							//$user_body_data_by_group[] = "<h2><a href='".$host."/group/".$dataByGroup['gid']."'>".$dataByGroup['glabel']."</a></h2>";
							//$user_body_data_by_group[] = "<a href='".$host."/group/".$dataByGroup['gid']."'>".$dataByGroup['glabel']."</a>:";
							$cnt_groups = $cnt_groups + 1;
							if ($cnt_groups>1) {
								$user_body_data_by_group[] = ' ';
							}
							
							$user_body_data_by_group[] = $dataByGroup['glabel']." - ".$host."/group/".$dataByGroup['gid']."/dashboard :";
							
							$cnt_documents_per_group = 0;
					
							foreach($dataByGroup['gdata'] as $item) {					

								$extraText = "";
								if (!in_array("mark", $item)) {
									if ($item['mark']=='MARK_NEW') {
										$extraText = '(New)';
									}
									elseif ($item['mark']=='MARK_UPDATED') {
										$extraText = '(Updated)';
									}
								}
								
								$cnt_documents_per_group = $cnt_documents_per_group + 1;
								
								//$user_body_data_by_group[] = $cnt_documents_per_group.") <a href='".$host."/node/".$item['nid']."'>".$item['title']." ".$extraText."</a>";
								$user_body_data_by_group[] = $cnt_documents_per_group.") ".$item['title']." ".$extraText." - ".$host."/node/".$item['nid'];
								
					
							}
							
							//we only add information of the group into the body if there are nodes in it
							if ($cnt_documents_per_group > 0) {
								$body  = html_entity_decode(implode('&#13;&#10;', $user_body_data_by_group));
								$there_are_data_to_send = True;					
							}
							
						}
				
					}
			
					//only send the email to the user if they have content in any of their groups
					if ($there_are_data_to_send==True) {
							
						$body = str_replace("[dynamic_content_per_user]", $body, $pos_group_notifications_body_message);
						$body = str_replace("[user:display-name]", $data['realname'], $body);
						$body = str_replace("[site:name]", $site_name, $body);
						
						
						
						$body = str_replace("[last_cron_run]", $last_cron_run, $body);
						
						//$body = str_replace("\n", "</br>", $body);
						
						/*
						$send_mail = new \Drupal\Core\Mail\Plugin\Mail\PhpMail(); // this is used to send HTML emails
		
						$message['headers'] = array(
							'content-type' => 'text/html; charset=UTF-8',
							'MIME-Version' => '1.0',
							'reply-to' => $site_email,
						);
						*/
						$to_email = $data['mail'];
						/*
						if ($pos_group_notifications_testing_mode==True) {
							$message['to'] = $pos_group_notifications_primary_email;
							$to_email = $pos_group_notifications_primary_email;
						}
						else {
							$message['to'] = $data['mail'];
							$to_email = $data['mail'];
						}
						
						$message['from'] = $site_email;
						*/
						$pos_group_notifications_subject_message = str_replace("[site:name]", $site_name, $pos_group_notifications_subject_message);
						
						$pos_group_notifications_subject_message = str_replace("[last_cron_run]", $last_cron_run, $pos_group_notifications_subject_message);
						
						$message['subject'] = $pos_group_notifications_subject_message;			
						$message['subject'] = PlainTextOutput::renderFromHtml($message['subject']);			
						$subject_email = PlainTextOutput::renderFromHtml($message['subject']);
						
						$message['body'] = render($body);
						$body_email = render($body);
						
						$message['language'] = \Drupal::currentUser()->getPreferredLangcode();
						
						//first test to send an email in D8
						//drupal_set_message('----------->sending email to user:'.$data['uid'], 'warning');
						/*						
						$send_mail->mail($message);
						
						//drupal_set_message($message['body'], 'error');
						
						//if (!$message['result']) {
						if (!in_array("result", $message)) {				
							//drupal_set_message('----------->Unable to send email. Contact the site administrator if the problem persists. To:'.$message['to'], 'error');
							$extra_text = '-Executed in testing mode:';
							if ($pos_group_notifications_testing_mode==1) {
								$extra_text .= " ON";
							}
							else {
								$extra_text .= " OFF";
							}
							$extra_text .= "</br>";
							
							\Drupal::logger('pos_group_notifications')->error(t('Unable to send email. Contact the site administrator if the problem persists.'). ' </br>'.$extra_text.'</br>-To:'.$message['to']." </br>-Subject:".$message['subject']."</br>-Body:</br>".$message['body']);
						}
						*/
						
						/*
						$mailManager = \Drupal::service('plugin.manager.mail');
  						$module = 'pos_group_notifications';
  						
  						
						
  						$params['message'] = $body_email;
  						$params['title'] = $subject_email;
  						$langcode = \Drupal::currentUser()->getPreferredLangcode();
  						//$langcode = 'en';
  						$send = true;
						*/
						
						$key = 'pos_group_notifications'; // Replace with Your key
						pos_send_custom_email($to_email, $subject_email, $body_email, $key);
						
						/*
  						$result = $mailManager->mail($module, $key, $to_email, $langcode, $params, NULL, $send);
						
  						if ($result['result'] != true) {
								
  							$extra_text = '-Executed in testing mode:';
							if ($pos_group_notifications_testing_mode==1) {
								$extra_text .= " ON";
							}
							else {
								$extra_text .= " OFF";
							}
							$extra_text .= "</br>";
							$extra_text .= '</br>-To:'.$to_email." </br>-Subject:".$subject_email."</br>-Body:</br>".$body_email;
							
							$message = t('There was a problem sending your email notification to @email.', array('@email' => $to_email));
							
							$message .= "</br>".$extra_text;
							//drupal_set_message($message, 'error');
							//\Drupal::logger('mail-log')->error($message);
							\Drupal::logger('pos_group_notifications')->error($message);
    						//return;
  						}		
						*/		
						
					}
				
				}
			}	
	  
	  		//drupal_set_message('data -> ---'.$data->uid, 'error');
	  	}	  
	}
  
	/*
	// We usually don't want to act every time cron runs (which could be every
	// minute) so keep a time for the next run in the site state.
	$next_execution = \Drupal::state()->get('pos_group_notifications.next_execution');
	$next_execution = !empty($next_execution) ? $next_execution : 0;
	if (REQUEST_TIME >= $next_execution) {
    	// This is a silly example of a cron job.
    	// It just makes it obvious that the job has run without
    	// making any changes to your database.
    	\Drupal::logger('pos_group_notifications')->notice('pos_group_notifications ran');
    	if (\Drupal::state()->get('pos_group_notifications_show_status_message')) {
      		\Drupal::messenger()->addMessage(t('pos_group_notifications executed at %time', ['%time' => date_iso8601(REQUEST_TIME)]));
      		\Drupal::state()->set('pos_group_notifications_show_status_message', FALSE);
		}
		\Drupal::state()->set('pos_group_notifications.next_execution', REQUEST_TIME + $interval);
	}
	*/
	
}

function pos_group_notifications_send_emails_solution_trial_not_published() {
	//drupal_set_message("***----".rand(1, 150)."--START pos_group_notifications_send_emails_solution_trial_not_published.---", 'error');

	$config =  \Drupal::config('pos_group_notifications.settings');
	$pos_group_notifications_reminder_solution_trial_not_publised_subject = $config->get('pos_group_notifications_reminder_solution_trial_not_publised_subject');
	$pos_group_notifications_reminder_solution_trial_not_publised_body = $config->get('pos_group_notifications_reminder_solution_trial_not_publised_body');

	// access to the main site data
	$system_site_config = \Drupal::config('system.site');
 	$site_email = $system_site_config->get('mail');
	$site_name = $system_site_config->get('name');
	
	global $base_url;
	$host = $base_url;	
	
	$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_reminder_solution_trial_not_publised_subject);
		
	$query = \Drupal::entityQuery('group');
  
	$groups_ids = $query->execute();
	
	$groups = \Drupal\group\Entity\Group::loadMultiple($groups_ids);
	
	foreach ($groups as $group) {
		
		$gid = $group->id[0]->value;
		$glabel = $group->label[0]->value;
		
		$request_publication = 0;
		$qa_approved = 0;
		$qa_comments = "";
		
		//if ($gid==65) {
		if (isset($group->field_publish)) {
			
			$request_publication = $group->field_publish[0]->value;
		}
		
		if (isset($group->field_qa_approved)) {
			$qa_approved = $group->field_qa_approved[0]->value;
		}
		
		if (isset($group->field_qa_comments)) {
			if ($group->field_qa_comments) {
				if ($group->field_qa_comments[0]) {
					$qa_comments = $group->field_qa_comments[0]->value;
				}
			}
		}
		
		//Request publication?	-> field_publish	
		//QA approved?	        -> field_qa_approved
		//QA comments	        -> field_qa_comments			
		
		//if (1==1) {
		if (($request_publication==1) && ($qa_approved!=1)) {
			//$cntMembers = $group->getMemberCount();
			//drupal_set_message("***".rand(1, 150)."----------gid=".$gid."---glabel=".$glabel."<---request_publication=".$request_publication."<---qa_approved=".$qa_approved."<-------", 'error');
			
			$members = $group->getMembers();
			
			foreach ($members as $member) {
				$user = $member->getUser();
				$uid = $user->get('uid')->value;
    			$realname = $user->get('field_real_name')->value;
				$mail = $user->get('mail')->value; 
				
				$key = 'pos_trial_solution_not_published';
				
 
				$body_email = $pos_group_notifications_reminder_solution_trial_not_publised_body;
			
				$body_email = str_replace("[user:display-name]", $realname, $body_email);
				$body_email = str_replace("[site:name]", $site_name, $body_email);

				$group_name ="<a href='".$host."/group/".$gid."'>".$glabel."</a>";				
				$body_email = str_replace("[item:url]", $group_name, $body_email);
				
				$body_email = str_replace("[reason]", $qa_comments, $body_email);

				//$body_email= str_replace("\n", "</br>", $body_email);

				$body_email  = html_entity_decode( $body_email);
				$body_email = render($body_email);			
				
				//drupal_set_message("***".rand(1, 150)."----------->Before pos_send_custom_email<-------", 'error');
				pos_send_custom_email($mail, $subject_email, $body_email, $key);				

				
			 }
			
		}
	
	}
	

  
	//drupal_set_message("***----".rand(1, 150)."--END pos_group_notifications_send_emails_solution_trial_not_published.---", 'error');
} 


function pos_group_notifications_send_emails_expiring_items() {
	//drupal_set_message("***----".rand(1, 150)."--Start pos_group_notifications_send_emails_expiring_items.---", 'error');
	
	$config =  \Drupal::config('pos_group_notifications.settings');
	$pos_group_notifications_expiration_months = $config->get('pos_group_notifications_expiration_months');
	
	//drupal_set_message("***----".rand(1, 150)."pos_group_notifications_expiration_months:".$pos_group_notifications_expiration_months, 'error');
	
	if ($pos_group_notifications_expiration_months>0) {
		//drupal_set_message("Dins!!!", 'error');

		$system_site_config = \Drupal::config('system.site');
 		$site_email = $system_site_config->get('mail');
		$site_name = $system_site_config->get('name');
				
		$pos_group_notifications_expiration_subject = $config->get('pos_group_notifications_expiration_subject');
		$subject_email = str_replace("[site:name]", $site_name, $pos_group_notifications_expiration_subject);
		
		$pos_group_notifications_expiration_body = $config->get('pos_group_notifications_expiration_body');
		$key = 'pos_group_notification_expire_item';

	
		global $base_url;
		$host = $base_url;	
	
		$now = new DrupalDateTime('now');
		$now->setTimezone(new \DateTimeZone(DATETIME_STORAGE_TIMEZONE));
		//drupal_set_message("now:".$now);		
		$expirationDate = $now->modify('-'.$pos_group_notifications_expiration_months. 'month');		
		//drupal_set_message("now -".$pos_group_notifications_expiration_months." months:".$expirationDate);		
		//drupal_set_message("DATETIME_DATETIME_STORAGE_FORMAT:".DATETIME_DATETIME_STORAGE_FORMAT);
		//drupal_set_message("expirationDate in format:".$expirationDate->format(DATETIME_DATETIME_STORAGE_FORMAT));	
		//drupal_set_message("expirationDate timestamp :".$expirationDate->getTimestamp());
		
		
		//we need to recover all CT that belongds to the list of CT selected
		$pos_group_notifications_expiration_node_types = $config->get('pos_group_notifications_expiration_node_types');
		
		foreach ($pos_group_notifications_expiration_node_types as $ct_k=>$ct_v) {			
			if ($ct_k===$ct_v) {
				//this means that the CT is selected
				//drupal_set_message("***----".rand(1, 150)."ct_k:".$ct_k."----value:".$ct_v, 'error');
				
				$query = \Drupal::entityQuery('node');
				$query->condition('status', 1);
				$query->condition('type', $ct_k);
				//$query->condition('changed', $expirationDate->format(DATETIME_DATETIME_STORAGE_FORMAT), '<=');
				$query->condition('changed', $expirationDate->getTimestamp(), '<=');
				$entity_ids = $query->execute();
				$nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($entity_ids);
				
				foreach ($nodes as $n_k=>$n_v) {
					//drupal_set_message("***----".rand(1, 150)."n_k:".$n_k."--title:".$n_v->get('title')->value."---last update date:".$n_v->getChangedTime()."---uid:".$n_v->get('uid')->target_id, 'error');
					
					$account = \Drupal\user\Entity\User::load($n_v->get('uid')->target_id); // pass your uid
     				$userName = $account->getUsername();
					$realname = $account->get('field_real_name')->value;
					$userMail = $account->get('mail')->value; 
					
					//drupal_set_message("***----".rand(1, 150)."n_k:".$n_k."--title:".$n_v->get('title')->value."---last update date:".$n_v->getChangedTime()."---uid:".$n_v->get('uid')->target_id."--userName:".$userName."---userMail:".$userMail."---realname:".$realname, 'error');
					
					$url_item = '<a href="'.$host.'/node/'.$n_k.'">'.$n_v->get('title')->value.'</a>';
					
					$body_email = $pos_group_notifications_expiration_body;
			
					$body_email = str_replace("[user:display-name]", $realname, $body_email);
					$body_email = str_replace("[site:name]", $site_name, $body_email);
					
					$body_email = str_replace("[item:url]", $url_item, $body_email);
					
					
					$body_email  = html_entity_decode( $body_email);
					$body_email = render($body_email);			
				
					//drupal_set_message("***".rand(1, 150)."----------->Before pos_send_custom_email<-------", 'error');
					pos_send_custom_email($userMail, $subject_email, $body_email, $key);
				
				}
				
				
			}
		}
		
		//we need to recover all groups that belongds to the list of groups selected
		$pos_group_notifications_expiration_group_types = $config->get('pos_group_notifications_expiration_group_types');

		foreach ($pos_group_notifications_expiration_group_types as $g_k=>$g_v) {
			if ($g_k===$g_v) {
				//this means that the group is selected
				//drupal_set_message("***----".rand(1, 150)."g_k:".$g_k."----value:".$g_v, 'error');
				
				$queryG = \Drupal::entityQuery('group');
				//$queryG->condition('status', 1);
				$queryG->condition('type', $g_k);
				$queryG->condition('changed', $expirationDate->getTimestamp(), '<=');
				$entity_ids = $queryG->execute();
				
				foreach ($entity_ids as $entity_k=>$entity_v) {

					$group = Drupal\group\Entity\Group::load($entity_k);				
					$gid = $group->id[0]->value;
					$glabel = $group->label[0]->value;
					$gauthor = $group->uid[0]->target_id;
					
					$account = \Drupal\user\Entity\User::load($gauthor); // pass your uid
     				$userName = $account->getUsername();
					$realname = $account->get('field_real_name')->value;
					$userMail = $account->get('mail')->value; 
					
					//drupal_set_message("***----".rand(1, 150)."gid:".$gid."--title:".$glabel."------uid:".$gauthor."--userName:".$userName."---userMail:".$userMail."---realname:".$realname, 'error');
					
					$url_item = '<a href="'.$host.'/group/'.$gid.'">'.$glabel.'</a>';
					
					$body_email = $pos_group_notifications_expiration_body;
			
					$body_email = str_replace("[user:display-name]", $realname, $body_email);
					$body_email = str_replace("[site:name]", $site_name, $body_email);
					
					$body_email = str_replace("[item:url]", $url_item, $body_email);
					
					
					$body_email  = html_entity_decode( $body_email);
					$body_email = render($body_email);			
				
					//drupal_set_message("***".rand(1, 150)."----------->Before pos_send_custom_email<-------", 'error');
					pos_send_custom_email($userMail, $subject_email, $body_email, $key);

					
					//drupal_set_message("***----".rand(1, 150)."gid:".$gid."--glabel:".$glabel."---gauthor:".$gauthor."<----", 'error');
				}
				
				
			}
		}
				
	}
	else {
		//drupal_set_message("expiration email disabled!!!", 'error');
	}
	
	//drupal_set_message("***----".rand(1, 150)."--END pos_group_notifications_send_emails_expiring_items.---", 'error');
}
